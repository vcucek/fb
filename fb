#!/bin/bash
# Author: Vito Cucek (vito.cucek@gmail.com)

# Print help
if [[ $1 = "--help" ]]; then
    echo 'File browser'
    echo 'Author: Vito Cucek'
    echo ' '
    echo 'Usage:'
    echo ' fb [-db] [folder]'
    echo ' '
    echo 'Options:'
    echo ' -d : print last folder'
    echo ' -b : show bookmarks'
    echo ' '
    echo 'Enable cd on exit by adding alias to ~/.bashrc file:'
    echo 'alias ff='"'"'fb; cd $(fb -d)'"'"
    echo ' '
    echo 'Movements:'
    echo ' Keys     : 'hjkl' or up, down, left, right arrows'
    echo ' Return   : Open file using xdg-open or enter folder'
    echo ' Backspace: Go back one folder'
    echo ' C^u      : Move up 10 files'
    echo ' C^d      : Move down 10 files'
    echo ' L,M,H    : Move low, middle, high'
    echo ' f[a-z]   : Go to file name starting with'
    echo ' .        : Repeat last "go to" action'
    echo ' '
    echo 'Actions:'
    echo ' q     : Exit script, mode, or dialog'
    echo ' O     : Edit file using default editor or vi'
    echo ' o     : Edit file using default editor or vi in a new terminal window (st by default)'
    echo ' t     : open new terminal window (st by default)'
    echo ' a     : Show hidden files/folders'
    echo ' e     : Execute command using current or marked files'
    echo '         Occurances of {} in specified command will be replaced by marked'
    echo '         files and executed sequentially'
    echo ' /     : Filter display (works also in selection or bookmarks mode)'
    echo ' ?     : Recursive search'
    echo ' g?    : Recursive content search'
    echo ' :     : Open new shell in curent directory and close fb'
    echo ' +     : list current mode (directory,selection,bookmarks,search) keyboard commands'
    echo ' '
    echo 'Bookmarks:'
    echo ' b  : open/close bookmarks'
    echo ' i  : Edit bookmarks (bookmarks mode)'
    echo ' d  : remove file/folder from bookmarks (bookmarks mode)'
    echo ' B  : Add current or marked folders and files to bookmarks'
    echo ' '
    echo 'Select:'
    echo ' v  : mark current file'
    echo ' V  : mark all files in current folder'
    echo ' c  : copy marked files to clipboard as command arguments'
    echo ' y  : add marked files to selection'
    echo ' Y : append marked files to selection'
    echo ' x  : clear selection and marked files'
    echo ' '
    echo 'Selection:'
    echo ' s  : show/hide current selection'
    echo ' i  : Edit selection (selection mode)'
    echo ' d  : remove file/folder from selection (selection mode)'
    echo ' x  : clear selection and marked files'
    echo ' '
    echo 'Edit:'
    echo ' n  : create named file (add "/" sufix to create a folder)'
    echo ' r  : rename current file or folder'
    echo ' p  : copy selection to current directory'
    echo ' P  : copy selection into folder under cursor'
    echo ' m  : move selection to current directory'
    echo ' M  : move selection into folder under cursor'
    echo ' d  : delete marked files or folders'
    echo ' '
    echo 'View:'
    echo ' J : Increase height'
    echo ' K : Decrease height'
    echo ' F : Switch to full screen mode'
    echo ' ~ : Switch between tree and list view'
    echo ' wr: Refresh view'
    echo ' '
    echo 'File sorting:'
    echo ' wn: sort by name'
    echo ' wm: sort by modified time'
    echo ' ws: sort by size'
    exit 0
fi

## Terminal settings ###########################################################

SAVEIFS=""
function terminal_setup {
    # set array separator
    SAVEIFS=$IFS
    FB_IFS=$(echo -en "\n\b")
    IFS=$FB_IFS
    # disable line wrapping
    printf '\e[?7l'
    # hide cursor
    printf '\e[?25l'

    # do not show user input
    stty -echo
}

function terminal_fetch {
    IFS=$' '
    read -r LINES COLUMNS < <(stty size)
    IFS=$FB_IFS
}

function terminal_restore {
    # restore line wrapping
    printf '\e[?7h'
    # show cursor
    printf '\e[?25h'
    # restore array separator
    IFS=$SAVEIFS
    # show user input
    stty echo
}

## Constants ###################################################################
APP_TERM=${TERMINAL:-st}
APP_EDITOR=${EDITOR:-vi}

# bottom/top padding when scrolling
PADDING=4
# Variable representing visible file system area height
HEIGHT=20
# Start in full screen mode
FULLSCREEN=false

# cache files
cache_dir=${HOME}/.cache/fb
cache_trash=${HOME}/.local/share/Trash
cache_selection=$cache_dir/selection
cache_bookmarks=$cache_dir/bookmarks
cache_cd=$cache_dir/dir

# colors
col_cursor=$'\e[1;31m'
col_select_bg=$'\e[1;103m'
col_select_fg=$'\e[1;30m'
col_nav=$'\e[1;32m'

col_link=$'\e[1;96m'
col_exec=$'\e[1;32m'
col_socket=$'\e[1;95m'
col_char=$'\e[1;93m'
col_folder=$'\e[1;94m'
col_none=$'\e[0m'

## Parameters ##################################################################

show_hidden=false

# Bottom bar text
status_message=""
notification_message=""

# dir,search,bookmarks,selection,marks,action
mode="dir"
# tree,flat
dir_mode="tree"

# copy,move,delete
action=""

# Draw context variables
fullscreen_mode=$FULLSCREEN

# Variable representing cursor file index
dc_cursor=0
# Variable representing top visible file index
dc_begin=0
# Variable representing number of visible files
dc_height=$HEIGHT
# lines to draw
dc_lines=()

# Current folder variables
files=()
current_file=
current_dir=

# name, access, modified, size
sort_by="name"

# files attributes
declare -A files_expanded
declare -A files_marked

last_key=""

cursor_stack=()
marks=()

## General Functions ###########################################################

function _read_fb {
    # show user input
    stty echo
    # show cursor
    printf '\e[?25h'
    read $1
    # move one line up
    printf "\e[1A"
    # hide cursor
    printf '\e[?25l'
    # do not show user input
    stty -echo
}

## Cursor stack functions ######################################################

function _cursor_push {
    cursor_stack+=($dc_cursor)
}

function _cursor_pop {
    if [ ${#cursor_stack[@]} -eq 0 ]; then
        dc_cursor=0
    else
        local val=${cursor_stack[-1]}
        unset 'cursor_stack[ ${#cursor_stack[@]}-1 ]'
        dc_cursor=$val
    fi;
}

## Bookmarks functions #########################################################

function _bookmark_add {
    echo "$(echo $1 | cat - $cache_bookmarks)" > $cache_bookmarks
}

function _bookmark_remove {
    unset files[$dc_cursor]
    files=("${files[@]}")
    sed -i "$((dc_cursor + 1))d" $cache_bookmarks
}

## Marks functions #########################################################

function _marks_add {
    files_marked[$current_file]=true
}
function _marks_add_all {
    render_loading
    for f in $current_dir/*; do
        files_marked["$f"]=true
    done
}

function _marks_toggle {
    # Check if selected
    if [ ! -z "${files_marked[$current_file]}" ]; then
        files_marked[$current_file]=
    else
        files_marked[$current_file]=true
    fi
}

function _marks_clear {
    files_marked=()
}

function _marks_args {
    printf "\'%s\' " "${!files_marked[@]}"
}

function _marks_to_selection {
    if [ ${#files_marked[@]} -ne 0 ]; then
        printf "%s\n" "${!files_marked[@]}" > $cache_selection
        sed -i "s/ *#.*//g; /^$/d" $cache_selection
    fi
}
function _marks_to_selection_append {
    if [ ${#files_marked[@]} -ne 0 ]; then
        printf "%s\n" "${!files_marked[@]}" >> $cache_selection
        sed -i "s/ *#.*//g; /^$/d" $cache_selection
    fi
}

## Selection functions #########################################################

function _selection_remove {
    sed -i "$((dc_cursor + 1))d" $cache_selection
    files=($(cat $cache_selection))
}

function _selection_clear {
    > $cache_selection
}

## Setup Content Functions #####################################################

function set_action {
    if [[ $mode = "dir" ]]; then _cursor_push; fi
    mode="action"
    action=$1
    status_message=$2
}

function set_bookmarks {
    if [[ $mode = "dir" ]]; then _cursor_push; fi
    dc_cursor=0
    dc_lines=()
    # replace empty lines with ~ to make files array indexes consistent with file lines
    files=($(cat $cache_bookmarks | sed "s/^$/~/"))
    mode="bookmarks"
    status_message="Stored bookmarks: 'Esc' to quit, '+' to see current mode actions"
}

function set_marks {
    if [ ${#files_marked[@]} -ne 0 ]; then
        if [[ $mode = "dir" ]]; then _cursor_push; fi
        dc_cursor=0
        dc_lines=()
        files=("${!files_marked[@]}")
        mode="marks"
        status_message="Marked files: 'Esc' to quit"
    fi
}

function set_selection {
    if [[ $mode = "dir" ]]; then _cursor_push; fi
    dc_cursor=0
    dc_lines=()
    files=($(cat $cache_selection))
    mode="selection"
    status_message="Selection: 'Esc' to quit, '+' to see current mode actions"
}

function set_filter {
    if [[ $mode = "dir" ]]; then _cursor_push; fi
    render_loading
    dc_cursor=0
    dc_lines=()
    files=($(printf "${files[*]}" | grep "$1"))
    mode="search"
    status_message="Filter results: 'Esc' to quit, '+' to see current mode actions"
}

function set_search {
    if [[ $mode = "dir" ]]; then _cursor_push; fi
    render_loading
    found=($(find $PWD -iname "*$1*" ))
    dc_cursor=0
    dc_lines=()
    files=("${found[@]}")
    mode="search"
    status_message="Search results: 'Esc' to quit, '+' to see current mode actions"
}

function set_search_content {
    if [[ $mode = "dir" ]]; then _cursor_push; fi
    render_loading
    found=($(grep -Isr "$1"))
    dc_cursor=0
    dc_lines=($(printf "%s\n" "${found[@]}"))
    files=($(printf "%s\n" "${found[@]}" | sed "s/:.*//g"))
    mode="search"
    status_message="Search results: 'Esc' to quit, '+' to see current mode actions"
}

function set_dir {
    cd ${1:-.} > /dev/null 2>&1 || return
    dc_cursor=0
    set_dir_refresh
    current_dir=$PWD
    mode="dir"
    status_message="Directory mode: 'q' to quit, '+' to see current mode actions"
    _marks_clear
}

function set_dir_refresh {
    files=()
    dc_lines=()
    if [[ $dir_mode = "flat" ]]; then
        do_set_dir $PWD
    fi
    if [[ $dir_mode = "tree" ]]; then
        dir_level=0
        do_set_tree $PWD
    fi
}

function do_set_dir {
    cd ${1:-.} > /dev/null 2>&1 || return

    dc_cursor=0
    dc_begin=0

    local dir_list=()
    local dir_list_draw=()
    local file_list=()
    local file_list_draw=()

    local tmp=()
    local tmp_details=()

    local sort_arg=
    if [ $sort_by = "name" ]; then
        sort_arg=
    elif [ $sort_by = "size" ]; then
        sort_arg="-S"
    elif [ $sort_by = "modified" ]; then
        sort_arg="-c"
    fi

    if $show_hidden; then
        tmp=($(ls -AN -1 $sort_arg))
        tmp_details=($(ls -ANlh -1 $sort_arg))
    else
        tmp=($(ls -N -1 $sort_arg))
        tmp_details=($(ls -Nlh -1 $sort_arg))
    fi

    # root directory fix
    [[ $PWD == / ]] && PWD=

    # sort directories first
    for ((i=0; i<${#tmp[*]}; i++)); do
        local file=${tmp[i]}
        if [[ -d $file ]]; then

            dir_list+=("$PWD/$file")
            dir_list_draw+=("${tmp_details[i+1]}")
        else
            file_list+=("$PWD/$file")
            file_list_draw+=("${tmp_details[i+1]}")
        fi
    done

    files=("${dir_list[@]}")
    files+=("${file_list[@]}")
    dc_lines=("${dir_list_draw[@]}")
    dc_lines+=("${file_list_draw[@]}")

    current_dir=$PWD
}

function do_set_tree {

    local dir_list=()
    local file_list=()

    local find_arg=
    local sort_arg=

    if [ $sort_by = "name" ]; then
        sort_arg="-ifd"
    elif [ $sort_by = "size" ]; then
        find_arg="-printf '%s\t%p\n'"
        sort_arg="-gr"
    elif [ $sort_by = "modified" ]; then
        find_arg="-printf '%T+\t%p\n'"
        sort_arg="-gr"
    fi

    if $show_hidden; then
        dir_list=($(eval find -L \'$1\' -mindepth 1 -maxdepth 1 -type d $find_arg \
            | sort $sort_arg | cut -f 2))
        file_list=($(eval find -L \'$1\' -mindepth 1 -maxdepth 1 -not -type d $find_arg \
            | sort $sort_arg | cut -f 2))
    else
        dir_list=($(eval find -L \'$1\' -mindepth 1 -maxdepth 1 -type d $find_arg \
            | grep -v '/\.' | sort $sort_arg | cut -f 2))
        file_list=($(eval find -L \'$1\' -mindepth 1 -maxdepth 1 -not -type d $find_arg \
            | grep -v '/\.' | sort $sort_arg | cut -f 2))
    fi

    local prefix=$(printf "|%*s" $(( $dir_level )) )
    prefix=${prefix// /"   |"}

    # sort directories first
    local i=0
    for ((i=0; i<${#dir_list[*]}; i++)); do
        d="${dir_list[i]}"
        files+=($d)
        dc_lines+=($prefix${d##*/})
        is_expanded=${files_expanded["$d"]}
        if [ ! -z ${is_expanded:+x} ]; then
            ((dir_level++))
            do_set_tree ${dir_list[i]}
            ((dir_level--))
        fi
    done
    for ((i=0; i<${#file_list[*]}; i++)); do
        f="${file_list[i]}"
        files+=($f)
        dc_lines+=($prefix${f##*/})
    done
}

## Rendering Functions #########################################################

function row_nav {
    # store cursor position
    printf "\033[s"
    # move one line down, clear and print
    printf "\033[1B"
    printf "\033[2K"
    printf "%s" "$3$2$1$col_none"
}

function row_nav_end {
    # restore cursor position
    printf "\033[u"
    # set dc_cursor to beginning
    # printf "\e[1A"
    # printf "\e[200D"
}

function row {
    printf "$3$2%s$col_none\033[K\n" "$1"
    ((dc_canvas_height++))
}

function render {

    dc_canvas_height=0

    # Clamp rows to terminal height, specified as LINES
    if $fullscreen_mode; then
        dc_height=10000
    fi
    local files_size=${#files[@]}

    dc_height=$(( $dc_height+5 > $LINES ? $LINES-5 : $dc_height ))
    dc_height=$(( $dc_height < $PADDING ? $PADDING : $dc_height ))

    # Clamp cursor
    dc_cursor=$(( $dc_cursor < 0 ? 0 : $dc_cursor ))
    dc_cursor=$(( $dc_cursor > $files_size-1 ? $files_size-1 : $dc_cursor ))

    # Print header and navigation bar
    row "---------------------------------------------------------------------------------------"
    row $PWD $col_nav
    row "---------------------------------------------------------------------------------------"

    dc_begin=$(( $dc_cursor - $dc_begin < $PADDING ? $dc_cursor - $PADDING : $dc_begin ))
    dc_begin=$(( $dc_begin < 0 ? 0 : $dc_begin ))
    dc_begin=$(( $dc_cursor - $dc_begin + $PADDING > $dc_height ? $dc_cursor + $PADDING - $dc_height : $dc_begin ))
    dc_begin=$(( $dc_begin < 0 ? 0 : $dc_begin ))

    for (( i=0; i<$dc_height; i++ )); do
        file_index=$((dc_begin + i))

        file=${files[file_index]}
        file_draw=${dc_lines[file_index]}

        color_fg=""
        color_bg=""

        # Check if directory
        if [ -d $file ]; then
            color_fg=$col_folder
        # Check if char device
        elif [ -c $file ]; then
            color_fg=$col_char
        # Check if socket
        elif [ -S $file ]; then
            color_fg=$col_socket
        # Check if executable
        elif [ -x $file ]; then
            color_fg=$col_exec
        fi
        # Check if link
        if [ -h $file ]; then
            color_fg=$col_link
        fi

        # Check if selected
        if [ ! -z "$file" ]; then
            local file_marked=${files_marked[$file]}
            if [ ! -z "$file_marked" ]; then
                color_bg=$col_select_bg
                color_fg=$col_select_fg
            fi
        fi
        # Check if current dc_cursor
        if [ $file_index -eq $dc_cursor ]; then
            current_file=$file
            if [[ $mode = "dir" ]]; then
                current_dir=${file%/*}
            fi
            color_fg=$col_cursor
        fi

        row ${file_draw:-$file} $color_fg $color_bg
    done

    row "---------------------------------------------------------------------------------------"

    # Print bottom message without entering new line
    local message=$status_message
    [[ ! -z $notification_message ]] && message=$notification_message
    printf "%s\033[K" "$message"

    # clear notification message
    notification_message=""

    # render all with one print command to improve performance
    # printf "%b" "${dc_canvas[*]}"

    # set dc_cursor to beginning
    printf "\e[2000D"
    printf "\e[%sA" $dc_canvas_height
}

function render_loading {
    notification_message="Loading..."
    render
}

function render_clear {
    printf "\e[J"
}

## Init/Exit/Run Functions #################################################

function _initialize() {
    #configure terminal
    terminal_setup
    terminal_fetch

    # initialize cache
    mkdir -p $cache_dir
    touch $cache_selection
    touch $cache_bookmarks

    # register signal hooks
    trap _on_stop TSTP
    trap _on_resume CONT
    trap _on_terminate EXIT
    trap 'terminal_fetch; render' WINCH
}

# Terminal hooks

function _on_terminate(){
    render_clear
    terminal_restore
    printf "%s" "$PWD" > $cache_cd
    exit 0
}

function _on_stop(){
    render_clear
    terminal_restore
    kill -s SIGSTOP $$
}

function _on_resume(){
    terminal_setup
    echo Press enter to continue...
}

function _exit(){
    render_clear
    terminal_restore
    printf "%s" "$PWD" > $cache_cd
    exit 0
}

function _run {
    render_clear
    echo Executing subshell...
    terminal_restore
    cd $current_dir
    eval "$SHELL"
    cd $PWD
    terminal_setup
}

function _execute {
    render_clear
    terminal_restore
    if [ ${#files_marked[@]} -ne 0 ]; then
        eval 'printf "%s\n" "${!files_marked[@]}" | xargs -n 1 -I{} $1'
    else
        eval 'printf "${files[dc_cursor]}" | xargs -n 1 -I{} $1'
    fi
    terminal_setup
}

## Mode actions ############################################################

function _view_keys {
    # switch flat/tree folder view
    if [[ $key = '~' ]]; then 
        if [[ $dir_mode = "flat" ]]; then
            dir_mode="tree"
        else
            dir_mode="flat"
        fi
        set_dir
    fi
    if [[ $key_l = 'wr' ]]; then 
        if [[ $mode = "selection" ]]; then
            set_selection
        fi
        if [[ $mode = "dir" ]]; then
            set_dir
        fi
        if [[ $mode = "bookmarks" ]]; then
            set_bookmarks
        fi
        key="consumed"
    fi
    # resize actions
    if [[ $key = 'J' ]]; then 
        render_clear
        dc_height=$((dc_height + 1))
    fi
    if [[ $key = 'K' ]]; then 
        render_clear
        dc_height=$((dc_height - 1))
    fi
    if [[ $key = 'F' ]]; then 
        if $fullscreen_mode; then
            render_clear
            fullscreen_mode=false
            dc_height=$HEIGHT
        else
            fullscreen_mode=true
        fi
    fi
}

function _action_keys {
    if [[ $key = 'y' ]]; then 
        render_loading
        if [[ $action = "copy" ]]; then 
            printf "%s\n" "${files[@]}" | xargs -n 100 -P 0 -I{} cp -r '{}' $current_dir
        fi
        if [[ $action = "move" ]]; then 
            printf "%s\n" "${files[@]}" | xargs -n 100 -P 0 -I{} mv '{}' $current_dir
        fi
        if [[ $action = "delete" ]]; then 
            printf "%s\n" "${files[@]}" | xargs -n 100 -P 0 -I{} rm -r '{}'
        fi
        _marks_clear
        _selection_clear
        set_dir .
        _cursor_pop
    fi
    if [[ $key = 'n' || $key = 'q' ]]; then 
        set_dir .
        _cursor_pop
    fi
}

function _navigate_keys {

    if [[ $key = '+' ]]; then
        render_clear
        row_nav
        echo 'Movement commands: '
        echo ' Keys     : 'hjkl' or up, down, left, right arrows'
        echo ' Return   : Open file using xdg-open or enter folder'
        echo ' Backspace: Go back one folder'
        echo ' C^u      : Move up 10 files'
        echo ' C^d      : Move down 10 files'
        echo ' L,M,H    : Move low, middle, high'
        echo ' f[a-z]   : Go to file name starting with'
        echo ' .        : Repeat last "go to" action'
    fi

    # Repeat last go to action
    if [[ $key = '.' ]]; then 
        last_key='f'
        key=$last_goto_key
    fi
    # Go to action
    if [[ $last_key = 'f' ]]; then 
        last_goto_key=$key
        for (( i=$(( $dc_cursor + 1 )); i<${#files[@]}; i++ )); do
            if [[ "${files[i]##*/}" == "$key"* ]]; then
                dc_cursor=$i
                key="consumed"
                return
            fi
        done
        # if not found go again from beginning
        for (( i=0; i<$dc_cursor; i++ )); do
            if [[ "${files[$i]##*/}" == "$key"* ]]; then
                dc_cursor=$i
                key="consumed"
                return
            fi
        done
        key="consumed"
        return
    fi

    # up/down
    if [[ $key = 'k' || $key = $'\e[A' ]]; then 
        dc_cursor=$((dc_cursor - 1))
    fi
    if [[ $key = 'j' || $key = $'\e[B' ]]; then 
        dc_cursor=$((dc_cursor + 1))
    fi

    # 10 up/down
    if [[ $key = $'\x15' ]]; then
        dc_cursor=$((dc_cursor - 10))
    fi
    if [[ $key = $'\x04' ]]; then
        dc_cursor=$((dc_cursor + 10))
    fi

    # Move high/middle/low
    if [[ $key = 'H' ]]; then
        dc_cursor=$dc_begin
    fi
    if [[ $key = 'M' ]]; then
        dc_cursor=$(( dc_begin + dc_height / 2))
    fi
    if [[ $key = 'L' ]]; then
        dc_cursor=$(( dc_begin + dc_height ))
    fi

    # Move top/bottom
    if [[ $key_l = 'gg' ]]; then
        dc_cursor=0
        key="consumed"
    fi
    if [[ $key = 'G' ]]; then
        local count=${#dc_lines[@]}
        dc_cursor=$(( count - 1 ))
    fi
}

function _navigate_tree_keys {
    # Expand current folder
    if [[ $key = 'l' || $key = $'\e[C' ]]; then
        file="${files[dc_cursor]}"
        if [ -d $file -o -h $file ]; then
            if [ -z "${files_expanded["$file"]}" ]; then
                files_expanded["$file"]=true
                set_dir_refresh
            fi
            key="consumed"
        fi
    fi
    if [[ $key = 'h' || $key = $'\e[D' ]]; then
        file="${files[dc_cursor]}"
        if [ -d $file -o -h $file ]; then
            if [ ! -z "${files_expanded["$file"]}" ]; then
                files_expanded["$file"]=
                set_dir_refresh
            fi
            key="consumed"
        fi
    fi
}

function _mark_keys {
    if [[ $key = "+" ]]; then
        render_clear
        row_nav
        echo 'Mark and selection commands: '
        echo ' v  : mark current '
        echo ' V  : mark all '
        echo ' c  : copy marked to clipboard as command arguments'
        echo ' y  : add marked files to selection '
        echo ' Y  : append marked files to selection'
        echo ' x  : clear selection and marks'
    fi
    # mark all
    if [[ $key = 'V' ]]; then
        _marks_add_all
    fi
    # mark current
    if [[ $key = 'v' ]]; then
        _marks_toggle 
        dc_cursor=$((dc_cursor + 1))
    fi
    # add marked files to selection
    if [[ $key = 'y' ]]; then
        _marks_to_selection
        _marks_clear
    fi
    # append marked files to selection
    if [[ $key = 'Y' ]]; then
        _marks_to_selection_append
        _marks_clear
    fi
    # clear marks and selection
    if [[ $key = 'x' ]]; then
        _marks_clear
        _selection_clear
        # switch to directory mode 
        if [[ $mode = "selection" ]]; then
            set_dir
            _cursor_pop
        fi
    fi
    # copy marked to clipboard as command arguments
    if [[ $key = 'c' ]]; then
        _marks_args | xsel -bi
        _marks_clear
    fi
}

function _search_keys {
    # Print commands
    if [[ $key = '+' ]]; then
        render_clear
        row_nav
        echo 'Search commands: '
        echo ' ?  : Find recursive'
        echo ' g? : Find content recursive'
    fi
    # recursive content search
    if [[ $key_l = 'g?' ]]; then
        local search=
        row_nav "Search content: "; _read_fb search
        row_nav_end
        [ $search ] && set_search_content $search
        key="consumed"
    fi
    # recursive search
    if [[ $key = '?' ]]; then
        local search=
        row_nav "Search: "; _read_fb search
        row_nav_end
        [ $search ] && set_search $search
    fi
}

function _common_keys {
    # Print commands
    if [[ $key = '+' ]]; then
        render_clear
        row_nav
        echo 'General: '
        echo ' O  : Edit file'
        echo ' o  : Edit file in a new window'
        echo ' t  : open new terminal window'
        echo ' e  : Execute command using current or marked files'
        echo ' /  : Filter '
        echo ' :  : Run shell command '
        echo ' b  : open/close bookmarks '
        echo ' B  : bookmark current '
    fi
    # Enter current folder
    if [[ $key = 'l' || $key = $'\e[C' || $key = '' ]]; then
        if [ ${#files[@]} -ne 0 ]; then
            local curr="${files[dc_cursor]}"
            if [ -d $curr ]; then
                _cursor_push
                set_dir $curr
            fi
            if [ -h $curr ]; then
                cursor_stack=()
                set_dir $curr
            fi
        fi
    fi
    # Open current file
    if [[ $key = '' ]]; then
        local curr="${files[dc_cursor]}"
        if [ -f $curr ]; then
            xdg-open $curr &>/dev/null &
            disown
        fi
    fi
    # edit current file
    if [[ $key = 'O' ]]; then
        /bin/bash -c "${APP_EDITOR} \"${files[dc_cursor]}\""
        terminal_setup
    fi
    # edit current file in a new window
    if [[ $key = 'o' ]]; then
        nohup ${APP_TERM} -e ${APP_EDITOR} ${files[dc_cursor]} >/dev/null 2>&1 &
    fi
    # open terminal
    if [[ $key = 't' ]]; then
        nohup ${APP_TERM} >/dev/null 2>&1 &
    fi
    # run program using current file
    if [[ $key = 'e'  ]]; then
        local _program=
        row_nav "execute with: "; _read_fb _program
        [ $_program ] && _execute $_program 
    fi
    # open shell
    if [[ $key = ':' ]]; then
        _run
    fi
    # filter
    if [[ $key = '/' ]]; then
        row_nav "Filter: "; _read_fb filter
        row_nav_end
        [ $filter ] && set_filter $filter
    fi
    # show bookmarks
    if [[ $key = 'b' ]]; then
        set_bookmarks
    fi
    # add current dir or marked files to bookmarks
    if [[ $key = 'B' ]]; then
        if [ ${#files_marked[@]} -ne 0 ]; then
            for i in "${!files_marked[@]}"; do
                _bookmark_add "$i"
            done
            _marks_clear
            notification_message="Selection added to bookmarks"
        else
            _bookmark_add "${files[dc_cursor]}"
            notification_message="Current folder added to bookmarks"
        fi
    fi
    # show selection
    if [[ $key = 's'  ]]; then
        set_selection
    fi
}

function _search_mode_keys {
    if [[ $key = '+' ]]; then
        render_clear
        row_nav
        echo 'Search mode actions: '
        echo ' d  : delete file or folder '
    fi
    if [[ $key = 'l' || $key = $'\e[C' || $key = '' ]]; then
        local curr="${files[dc_cursor]}"
        if [ -d $curr ]; then
            cursor_stack=()
        fi
    fi
    # Command delete selected files
    if [[ $key = 'd' ]]; then
        if [ ${#files_marked[@]} -ne 0 ]; then
            set_marks
            set_action "delete" "Delete listed files? (y/n)"
        else
            _marks_add
            set_marks
            set_action "delete" "Delete listed files? (y/n)"
        fi
    fi
}

function _bookmarks_mode_keys {
    if [[ $key = '+' ]]; then
        render_clear
        row_nav
        echo 'Bookmark mode actions: '
        echo ' i  : edit bookmarks '
        echo ' r  : remove bookmark '
        echo ' s  : quit bookmarks view '
    fi
    if [[ $key = 'i' ]]; then
        /bin/bash -c "${APP_EDITOR} \"$cache_bookmarks\""
        terminal_setup
        set_bookmarks
    fi
    if [[ $key = 'r' ]]; then
        _bookmark_remove
    fi
    if [[ $key = 'l' || $key = $'\e[C' || $key = "" ]]; then
        cursor_stack=()
    fi
    if [[ $key = 'b' ]]; then
        key=$'\x1b'
    fi
}

function _selection_mode_keys {
    if [[ $key = '+' ]]; then
        render_clear
        row_nav
        echo 'Selection commands: '
        echo ' i : edit selection '
        echo ' p : copy listed files to current folder '
        echo ' m : move listed files to current folder '
        echo ' r : remove file from selection '
        echo ' d : delete listed files from filesystem '
        echo ' s : quit selection view '
    fi
    if [[ $key = 'i' ]]; then
        /bin/bash -c "${APP_EDITOR} \"$cache_selection\""
        terminal_setup
        set_selection
        key="consumed"
    fi
    if [[ $key = 'r' ]]; then
        _selection_remove
        key="consumed"
    fi
    if [[ $key = 'p' ]]; then
        set_marks
        set_action "copy" "Copy listed files to current folder (y/n)"
        key="consumed"
    fi
    if [[ $key = 'm' ]]; then
        set_marks
        set_action "move" "Move listed files to current folder (y/n)"
        key="consumed"
    fi
    if [[ $key = 'd' ]]; then
        set_marks
        set_action "delete" "delete listed files from filesystem (y/n)"
        key="consumed"
    fi
    if [[ $key = 's' ]]; then
        key=$'\x1b'
    fi
}

function _dir_mode_keys {
    # Print commands
    if [[ $key = '+' ]]; then
        render_clear
        row_nav
        echo 'Current directory commands: '
        echo ' a  : Show hidden files/folders'
        echo ' n  : create file or folder (to create folder end it with "/")'
        echo ' r  : rename current file or folder'
        echo ' p  : copy selection to current directory'
        echo ' m  : move selection to current directory'
        echo ' d  : delete marked files or folders'
    fi
    # Go back one folder
    if [[ $key = 'h' || $key = $'\e[D' || $key = $'\x7f' ]]; then
        set_dir ..
        _cursor_pop
        key="consume"
    fi
    # show hiddne files
    if [[ $key = 'a' ]]; then
        if $show_hidden; then
            show_hidden=false
        else
            show_hidden=true
        fi
        set_dir .
        key="consume"
    fi
    if [[ $key_l = 'wn' ]]; then
        sort_by="name"
        set_dir .
        key="consume"
    fi
    if [[ $key_l = 'wm' ]]; then
        sort_by="modified"
        set_dir .
        key="consume"
    fi
    if [[ $key_l = 'ws' ]]; then
        sort_by="size"
        set_dir .
        key="consume"
    fi
    # Command create new file
    if [[ $key = 'n'  ]]; then
        row_nav "New file/foler name: "
        _read_fb name
        row_nav_end
        if [[ "$name" == */ ]]; then
            mkdir $current_dir/$name
        else
            touch $current_dir/$name
        fi
        set_dir_refresh 
        key="consume"
    fi
    # Command paste selection
    if [[ $key = 'p'  ]]; then
        set_selection
        set_action "copy" "Paste listed files to '$(basename $current_dir)'? (y/n)"
        key="consume"
    fi
    # Command move selection
    if [[ $key = 'm'  ]]; then
        set_selection
        set_action "move" "Move listed files to '$(basename $current_dir)'? (y/n)"
        key="consume"
    fi
    # Command paste selection into
    if [[ $key = 'P' && -d $current_file ]]; then
        set_selection
        current_dir=$current_file
        set_action "copy" "Paste listed files to '$(basename $current_dir)'? (y/n)"
        key="consume"
    fi
    # Command move selection into
    if [[ $key = 'M' && -d $current_file ]]; then
        set_selection
        current_dir=$current_file
        set_action "move" "Move listed files to '$(basename $current_dir)'? (y/n)"
        key="consume"
    fi
    # Command rename current file
    if [[ $key = 'r' ]]; then
        _cursor_push
        row_nav "New name: "

        _read_fb name

        terminal_restore
        rename -i $(basename "${files[dc_cursor]}") "$name" "${files[dc_cursor]}"
        terminal_setup

        #row_nav_end
        printf "\033[u"
        set_dir .
        _cursor_pop
        key="consume"
    fi
    # Command delete selected files
    if [[ $key = 'd' ]]; then
        if [ ${#files_marked[@]} -ne 0 ]; then
            set_marks
            set_action "delete" "Delete listed files? (y/n)"
        else
            _marks_add
            set_marks
            set_action "delete" "Delete listed files? (y/n)"
        fi
        key="consume"
    fi
}

## Program execution ###########################################################

# Print last directory and exit
if [[ $1 = "-d" ]]; then
    if [ -f $cache_cd ]; then
        echo $(cat $cache_cd)
    fi
    exit 0
fi
# Start program with initial directory
if [[ -d $1 ]]; then
    cd $1
fi

# Initialize terminal, cache, hooks
_initialize

if [[ $1 = "-b" ]]; then
    # show bookmarks 
    set_bookmarks
else
    # show current directory 
    set_dir $PWD
fi

while :
do
    render

    # read key
    k1=
    k2=
    k3=
    read -sn1 k1
    if [[ $k1 == $'\e' ]]; then
        read -sn1 -t 0.0001 k2
        read -sn1 -t 0.0001 k3
    fi
    key=${k1}${k2}${k3}
    key_l=$last_key${k1}${k2}${k3}

    # handle key actions
    _view_keys

    current_mode=$mode

    if [[ $current_mode = "action" ]]; then
        _navigate_keys
        _action_keys
    elif [[ $current_mode = "selection" ]]; then
        _navigate_keys
        _common_keys
        _mark_keys
        _selection_mode_keys
    elif [[ $current_mode = "search" ]]; then
        _navigate_keys
        _common_keys
        _mark_keys
        _search_keys
        _search_mode_keys
    elif [[ $current_mode = "bookmarks" ]]; then
        _navigate_keys
        _common_keys
        _bookmarks_mode_keys
    fi

    if [[ $current_mode = "dir" ]]; then
        if [[ $dir_mode = "tree" ]]; then
            _navigate_tree_keys
        fi
        _navigate_keys
        _common_keys
        _mark_keys
        _search_keys
        _dir_mode_keys
    else
        # Go to dir mode
        # h, left, backspace, esc
        if [[ $key = "h" || $key = $'\e[D' || $key = $'\x7f' || $key = $'\x1b' ]]; then
            set_dir 
            _cursor_pop
        fi
    fi

    # quit 
    if [[ $key = q ]]; then
        _exit
    fi

    last_key=$key
done

terminal_restore
exit 0
